// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ClientReadRegistryClient is the client API for ClientReadRegistry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClientReadRegistryClient interface {
	// Streams updates to the registry.
	Updates(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (ClientReadRegistry_UpdatesClient, error)
	// Lookup the requested member.
	Member(ctx context.Context, in *MemberRequest, opts ...grpc.CallOption) (*MemberResponse, error)
	// List the members in the registry.
	Members(ctx context.Context, in *MembersRequest, opts ...grpc.CallOption) (*MembersResponse, error)
}

type clientReadRegistryClient struct {
	cc grpc.ClientConnInterface
}

func NewClientReadRegistryClient(cc grpc.ClientConnInterface) ClientReadRegistryClient {
	return &clientReadRegistryClient{cc}
}

func (c *clientReadRegistryClient) Updates(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (ClientReadRegistry_UpdatesClient, error) {
	stream, err := c.cc.NewStream(ctx, &ClientReadRegistry_ServiceDesc.Streams[0], "/registry.ClientReadRegistry/Updates", opts...)
	if err != nil {
		return nil, err
	}
	x := &clientReadRegistryUpdatesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ClientReadRegistry_UpdatesClient interface {
	Recv() (*Member2, error)
	grpc.ClientStream
}

type clientReadRegistryUpdatesClient struct {
	grpc.ClientStream
}

func (x *clientReadRegistryUpdatesClient) Recv() (*Member2, error) {
	m := new(Member2)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *clientReadRegistryClient) Member(ctx context.Context, in *MemberRequest, opts ...grpc.CallOption) (*MemberResponse, error) {
	out := new(MemberResponse)
	err := c.cc.Invoke(ctx, "/registry.ClientReadRegistry/Member", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientReadRegistryClient) Members(ctx context.Context, in *MembersRequest, opts ...grpc.CallOption) (*MembersResponse, error) {
	out := new(MembersResponse)
	err := c.cc.Invoke(ctx, "/registry.ClientReadRegistry/Members", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClientReadRegistryServer is the server API for ClientReadRegistry service.
// All implementations must embed UnimplementedClientReadRegistryServer
// for forward compatibility
type ClientReadRegistryServer interface {
	// Streams updates to the registry.
	Updates(*SubscribeRequest, ClientReadRegistry_UpdatesServer) error
	// Lookup the requested member.
	Member(context.Context, *MemberRequest) (*MemberResponse, error)
	// List the members in the registry.
	Members(context.Context, *MembersRequest) (*MembersResponse, error)
	mustEmbedUnimplementedClientReadRegistryServer()
}

// UnimplementedClientReadRegistryServer must be embedded to have forward compatible implementations.
type UnimplementedClientReadRegistryServer struct {
}

func (UnimplementedClientReadRegistryServer) Updates(*SubscribeRequest, ClientReadRegistry_UpdatesServer) error {
	return status.Errorf(codes.Unimplemented, "method Updates not implemented")
}
func (UnimplementedClientReadRegistryServer) Member(context.Context, *MemberRequest) (*MemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Member not implemented")
}
func (UnimplementedClientReadRegistryServer) Members(context.Context, *MembersRequest) (*MembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Members not implemented")
}
func (UnimplementedClientReadRegistryServer) mustEmbedUnimplementedClientReadRegistryServer() {}

// UnsafeClientReadRegistryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClientReadRegistryServer will
// result in compilation errors.
type UnsafeClientReadRegistryServer interface {
	mustEmbedUnimplementedClientReadRegistryServer()
}

func RegisterClientReadRegistryServer(s grpc.ServiceRegistrar, srv ClientReadRegistryServer) {
	s.RegisterService(&ClientReadRegistry_ServiceDesc, srv)
}

func _ClientReadRegistry_Updates_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ClientReadRegistryServer).Updates(m, &clientReadRegistryUpdatesServer{stream})
}

type ClientReadRegistry_UpdatesServer interface {
	Send(*Member2) error
	grpc.ServerStream
}

type clientReadRegistryUpdatesServer struct {
	grpc.ServerStream
}

func (x *clientReadRegistryUpdatesServer) Send(m *Member2) error {
	return x.ServerStream.SendMsg(m)
}

func _ClientReadRegistry_Member_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientReadRegistryServer).Member(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.ClientReadRegistry/Member",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientReadRegistryServer).Member(ctx, req.(*MemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientReadRegistry_Members_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientReadRegistryServer).Members(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.ClientReadRegistry/Members",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientReadRegistryServer).Members(ctx, req.(*MembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ClientReadRegistry_ServiceDesc is the grpc.ServiceDesc for ClientReadRegistry service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClientReadRegistry_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "registry.ClientReadRegistry",
	HandlerType: (*ClientReadRegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Member",
			Handler:    _ClientReadRegistry_Member_Handler,
		},
		{
			MethodName: "Members",
			Handler:    _ClientReadRegistry_Members_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Updates",
			Handler:       _ClientReadRegistry_Updates_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "registry.proto",
}

// ClientWriteRegistryClient is the client API for ClientWriteRegistry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClientWriteRegistryClient interface {
	Register(ctx context.Context, opts ...grpc.CallOption) (ClientWriteRegistry_RegisterClient, error)
}

type clientWriteRegistryClient struct {
	cc grpc.ClientConnInterface
}

func NewClientWriteRegistryClient(cc grpc.ClientConnInterface) ClientWriteRegistryClient {
	return &clientWriteRegistryClient{cc}
}

func (c *clientWriteRegistryClient) Register(ctx context.Context, opts ...grpc.CallOption) (ClientWriteRegistry_RegisterClient, error) {
	stream, err := c.cc.NewStream(ctx, &ClientWriteRegistry_ServiceDesc.Streams[0], "/registry.ClientWriteRegistry/Register", opts...)
	if err != nil {
		return nil, err
	}
	x := &clientWriteRegistryRegisterClient{stream}
	return x, nil
}

type ClientWriteRegistry_RegisterClient interface {
	Send(*ClientUpdate) error
	CloseAndRecv() (*ClientAck, error)
	grpc.ClientStream
}

type clientWriteRegistryRegisterClient struct {
	grpc.ClientStream
}

func (x *clientWriteRegistryRegisterClient) Send(m *ClientUpdate) error {
	return x.ClientStream.SendMsg(m)
}

func (x *clientWriteRegistryRegisterClient) CloseAndRecv() (*ClientAck, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ClientAck)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ClientWriteRegistryServer is the server API for ClientWriteRegistry service.
// All implementations must embed UnimplementedClientWriteRegistryServer
// for forward compatibility
type ClientWriteRegistryServer interface {
	Register(ClientWriteRegistry_RegisterServer) error
	mustEmbedUnimplementedClientWriteRegistryServer()
}

// UnimplementedClientWriteRegistryServer must be embedded to have forward compatible implementations.
type UnimplementedClientWriteRegistryServer struct {
}

func (UnimplementedClientWriteRegistryServer) Register(ClientWriteRegistry_RegisterServer) error {
	return status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedClientWriteRegistryServer) mustEmbedUnimplementedClientWriteRegistryServer() {}

// UnsafeClientWriteRegistryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClientWriteRegistryServer will
// result in compilation errors.
type UnsafeClientWriteRegistryServer interface {
	mustEmbedUnimplementedClientWriteRegistryServer()
}

func RegisterClientWriteRegistryServer(s grpc.ServiceRegistrar, srv ClientWriteRegistryServer) {
	s.RegisterService(&ClientWriteRegistry_ServiceDesc, srv)
}

func _ClientWriteRegistry_Register_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ClientWriteRegistryServer).Register(&clientWriteRegistryRegisterServer{stream})
}

type ClientWriteRegistry_RegisterServer interface {
	SendAndClose(*ClientAck) error
	Recv() (*ClientUpdate, error)
	grpc.ServerStream
}

type clientWriteRegistryRegisterServer struct {
	grpc.ServerStream
}

func (x *clientWriteRegistryRegisterServer) SendAndClose(m *ClientAck) error {
	return x.ServerStream.SendMsg(m)
}

func (x *clientWriteRegistryRegisterServer) Recv() (*ClientUpdate, error) {
	m := new(ClientUpdate)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ClientWriteRegistry_ServiceDesc is the grpc.ServiceDesc for ClientWriteRegistry service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClientWriteRegistry_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "registry.ClientWriteRegistry",
	HandlerType: (*ClientWriteRegistryServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Register",
			Handler:       _ClientWriteRegistry_Register_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "registry.proto",
}

// ReplicaReadRegistryClient is the client API for ReplicaReadRegistry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReplicaReadRegistryClient interface {
	// Streams updates to members owned by the target node.
	Updates(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (ReplicaReadRegistry_UpdatesClient, error)
}

type replicaReadRegistryClient struct {
	cc grpc.ClientConnInterface
}

func NewReplicaReadRegistryClient(cc grpc.ClientConnInterface) ReplicaReadRegistryClient {
	return &replicaReadRegistryClient{cc}
}

func (c *replicaReadRegistryClient) Updates(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (ReplicaReadRegistry_UpdatesClient, error) {
	stream, err := c.cc.NewStream(ctx, &ReplicaReadRegistry_ServiceDesc.Streams[0], "/registry.ReplicaReadRegistry/Updates", opts...)
	if err != nil {
		return nil, err
	}
	x := &replicaReadRegistryUpdatesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ReplicaReadRegistry_UpdatesClient interface {
	Recv() (*Member2, error)
	grpc.ClientStream
}

type replicaReadRegistryUpdatesClient struct {
	grpc.ClientStream
}

func (x *replicaReadRegistryUpdatesClient) Recv() (*Member2, error) {
	m := new(Member2)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ReplicaReadRegistryServer is the server API for ReplicaReadRegistry service.
// All implementations must embed UnimplementedReplicaReadRegistryServer
// for forward compatibility
type ReplicaReadRegistryServer interface {
	// Streams updates to members owned by the target node.
	Updates(*SubscribeRequest, ReplicaReadRegistry_UpdatesServer) error
	mustEmbedUnimplementedReplicaReadRegistryServer()
}

// UnimplementedReplicaReadRegistryServer must be embedded to have forward compatible implementations.
type UnimplementedReplicaReadRegistryServer struct {
}

func (UnimplementedReplicaReadRegistryServer) Updates(*SubscribeRequest, ReplicaReadRegistry_UpdatesServer) error {
	return status.Errorf(codes.Unimplemented, "method Updates not implemented")
}
func (UnimplementedReplicaReadRegistryServer) mustEmbedUnimplementedReplicaReadRegistryServer() {}

// UnsafeReplicaReadRegistryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReplicaReadRegistryServer will
// result in compilation errors.
type UnsafeReplicaReadRegistryServer interface {
	mustEmbedUnimplementedReplicaReadRegistryServer()
}

func RegisterReplicaReadRegistryServer(s grpc.ServiceRegistrar, srv ReplicaReadRegistryServer) {
	s.RegisterService(&ReplicaReadRegistry_ServiceDesc, srv)
}

func _ReplicaReadRegistry_Updates_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ReplicaReadRegistryServer).Updates(m, &replicaReadRegistryUpdatesServer{stream})
}

type ReplicaReadRegistry_UpdatesServer interface {
	Send(*Member2) error
	grpc.ServerStream
}

type replicaReadRegistryUpdatesServer struct {
	grpc.ServerStream
}

func (x *replicaReadRegistryUpdatesServer) Send(m *Member2) error {
	return x.ServerStream.SendMsg(m)
}

// ReplicaReadRegistry_ServiceDesc is the grpc.ServiceDesc for ReplicaReadRegistry service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReplicaReadRegistry_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "registry.ReplicaReadRegistry",
	HandlerType: (*ReplicaReadRegistryServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Updates",
			Handler:       _ReplicaReadRegistry_Updates_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "registry.proto",
}

// ReplicaRegistry2Client is the client API for ReplicaRegistry2 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReplicaRegistry2Client interface {
	// Update is used for forward registry updates to replica nodes.
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	// Sync sends the known versions for the members in the registry (or a
	// subset if too large) and receives any missed updates for those members
	// in response.
	Sync(ctx context.Context, in *ReplicaSyncRequest, opts ...grpc.CallOption) (*ReplicaSyncResponse, error)
}

type replicaRegistry2Client struct {
	cc grpc.ClientConnInterface
}

func NewReplicaRegistry2Client(cc grpc.ClientConnInterface) ReplicaRegistry2Client {
	return &replicaRegistry2Client{cc}
}

func (c *replicaRegistry2Client) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, "/registry.ReplicaRegistry2/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicaRegistry2Client) Sync(ctx context.Context, in *ReplicaSyncRequest, opts ...grpc.CallOption) (*ReplicaSyncResponse, error) {
	out := new(ReplicaSyncResponse)
	err := c.cc.Invoke(ctx, "/registry.ReplicaRegistry2/Sync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReplicaRegistry2Server is the server API for ReplicaRegistry2 service.
// All implementations must embed UnimplementedReplicaRegistry2Server
// for forward compatibility
type ReplicaRegistry2Server interface {
	// Update is used for forward registry updates to replica nodes.
	Update(context.Context, *UpdateRequest) (*UpdateResponse, error)
	// Sync sends the known versions for the members in the registry (or a
	// subset if too large) and receives any missed updates for those members
	// in response.
	Sync(context.Context, *ReplicaSyncRequest) (*ReplicaSyncResponse, error)
	mustEmbedUnimplementedReplicaRegistry2Server()
}

// UnimplementedReplicaRegistry2Server must be embedded to have forward compatible implementations.
type UnimplementedReplicaRegistry2Server struct {
}

func (UnimplementedReplicaRegistry2Server) Update(context.Context, *UpdateRequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedReplicaRegistry2Server) Sync(context.Context, *ReplicaSyncRequest) (*ReplicaSyncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sync not implemented")
}
func (UnimplementedReplicaRegistry2Server) mustEmbedUnimplementedReplicaRegistry2Server() {}

// UnsafeReplicaRegistry2Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReplicaRegistry2Server will
// result in compilation errors.
type UnsafeReplicaRegistry2Server interface {
	mustEmbedUnimplementedReplicaRegistry2Server()
}

func RegisterReplicaRegistry2Server(s grpc.ServiceRegistrar, srv ReplicaRegistry2Server) {
	s.RegisterService(&ReplicaRegistry2_ServiceDesc, srv)
}

func _ReplicaRegistry2_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicaRegistry2Server).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.ReplicaRegistry2/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicaRegistry2Server).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReplicaRegistry2_Sync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplicaSyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicaRegistry2Server).Sync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.ReplicaRegistry2/Sync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicaRegistry2Server).Sync(ctx, req.(*ReplicaSyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ReplicaRegistry2_ServiceDesc is the grpc.ServiceDesc for ReplicaRegistry2 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReplicaRegistry2_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "registry.ReplicaRegistry2",
	HandlerType: (*ReplicaRegistry2Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Update",
			Handler:    _ReplicaRegistry2_Update_Handler,
		},
		{
			MethodName: "Sync",
			Handler:    _ReplicaRegistry2_Sync_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "registry.proto",
}

// ClientReadRegistry2Client is the client API for ClientReadRegistry2 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClientReadRegistry2Client interface {
	Sync(ctx context.Context, in *ClientSyncRequest, opts ...grpc.CallOption) (ClientReadRegistry2_SyncClient, error)
}

type clientReadRegistry2Client struct {
	cc grpc.ClientConnInterface
}

func NewClientReadRegistry2Client(cc grpc.ClientConnInterface) ClientReadRegistry2Client {
	return &clientReadRegistry2Client{cc}
}

func (c *clientReadRegistry2Client) Sync(ctx context.Context, in *ClientSyncRequest, opts ...grpc.CallOption) (ClientReadRegistry2_SyncClient, error) {
	stream, err := c.cc.NewStream(ctx, &ClientReadRegistry2_ServiceDesc.Streams[0], "/registry.ClientReadRegistry2/Sync", opts...)
	if err != nil {
		return nil, err
	}
	x := &clientReadRegistry2SyncClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ClientReadRegistry2_SyncClient interface {
	Recv() (*ClientSyncUpdate, error)
	grpc.ClientStream
}

type clientReadRegistry2SyncClient struct {
	grpc.ClientStream
}

func (x *clientReadRegistry2SyncClient) Recv() (*ClientSyncUpdate, error) {
	m := new(ClientSyncUpdate)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ClientReadRegistry2Server is the server API for ClientReadRegistry2 service.
// All implementations must embed UnimplementedClientReadRegistry2Server
// for forward compatibility
type ClientReadRegistry2Server interface {
	Sync(*ClientSyncRequest, ClientReadRegistry2_SyncServer) error
	mustEmbedUnimplementedClientReadRegistry2Server()
}

// UnimplementedClientReadRegistry2Server must be embedded to have forward compatible implementations.
type UnimplementedClientReadRegistry2Server struct {
}

func (UnimplementedClientReadRegistry2Server) Sync(*ClientSyncRequest, ClientReadRegistry2_SyncServer) error {
	return status.Errorf(codes.Unimplemented, "method Sync not implemented")
}
func (UnimplementedClientReadRegistry2Server) mustEmbedUnimplementedClientReadRegistry2Server() {}

// UnsafeClientReadRegistry2Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClientReadRegistry2Server will
// result in compilation errors.
type UnsafeClientReadRegistry2Server interface {
	mustEmbedUnimplementedClientReadRegistry2Server()
}

func RegisterClientReadRegistry2Server(s grpc.ServiceRegistrar, srv ClientReadRegistry2Server) {
	s.RegisterService(&ClientReadRegistry2_ServiceDesc, srv)
}

func _ClientReadRegistry2_Sync_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ClientSyncRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ClientReadRegistry2Server).Sync(m, &clientReadRegistry2SyncServer{stream})
}

type ClientReadRegistry2_SyncServer interface {
	Send(*ClientSyncUpdate) error
	grpc.ServerStream
}

type clientReadRegistry2SyncServer struct {
	grpc.ServerStream
}

func (x *clientReadRegistry2SyncServer) Send(m *ClientSyncUpdate) error {
	return x.ServerStream.SendMsg(m)
}

// ClientReadRegistry2_ServiceDesc is the grpc.ServiceDesc for ClientReadRegistry2 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClientReadRegistry2_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "registry.ClientReadRegistry2",
	HandlerType: (*ClientReadRegistry2Server)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Sync",
			Handler:       _ClientReadRegistry2_Sync_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "registry.proto",
}

// ClientWriteRegistry2Client is the client API for ClientWriteRegistry2 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClientWriteRegistry2Client interface {
	MemberJoin(ctx context.Context, in *ClientMemberJoinRequest, opts ...grpc.CallOption) (*ClientMemberJoinResponse, error)
	MemberLeave(ctx context.Context, in *ClientMemberLeaveRequest, opts ...grpc.CallOption) (*ClientMemberLeaveResponse, error)
	MemberHeartbeat(ctx context.Context, in *ClientMemberHeartbeatRequest, opts ...grpc.CallOption) (*ClientMemberHeartbeatResponse, error)
}

type clientWriteRegistry2Client struct {
	cc grpc.ClientConnInterface
}

func NewClientWriteRegistry2Client(cc grpc.ClientConnInterface) ClientWriteRegistry2Client {
	return &clientWriteRegistry2Client{cc}
}

func (c *clientWriteRegistry2Client) MemberJoin(ctx context.Context, in *ClientMemberJoinRequest, opts ...grpc.CallOption) (*ClientMemberJoinResponse, error) {
	out := new(ClientMemberJoinResponse)
	err := c.cc.Invoke(ctx, "/registry.ClientWriteRegistry2/MemberJoin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientWriteRegistry2Client) MemberLeave(ctx context.Context, in *ClientMemberLeaveRequest, opts ...grpc.CallOption) (*ClientMemberLeaveResponse, error) {
	out := new(ClientMemberLeaveResponse)
	err := c.cc.Invoke(ctx, "/registry.ClientWriteRegistry2/MemberLeave", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientWriteRegistry2Client) MemberHeartbeat(ctx context.Context, in *ClientMemberHeartbeatRequest, opts ...grpc.CallOption) (*ClientMemberHeartbeatResponse, error) {
	out := new(ClientMemberHeartbeatResponse)
	err := c.cc.Invoke(ctx, "/registry.ClientWriteRegistry2/MemberHeartbeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClientWriteRegistry2Server is the server API for ClientWriteRegistry2 service.
// All implementations must embed UnimplementedClientWriteRegistry2Server
// for forward compatibility
type ClientWriteRegistry2Server interface {
	MemberJoin(context.Context, *ClientMemberJoinRequest) (*ClientMemberJoinResponse, error)
	MemberLeave(context.Context, *ClientMemberLeaveRequest) (*ClientMemberLeaveResponse, error)
	MemberHeartbeat(context.Context, *ClientMemberHeartbeatRequest) (*ClientMemberHeartbeatResponse, error)
	mustEmbedUnimplementedClientWriteRegistry2Server()
}

// UnimplementedClientWriteRegistry2Server must be embedded to have forward compatible implementations.
type UnimplementedClientWriteRegistry2Server struct {
}

func (UnimplementedClientWriteRegistry2Server) MemberJoin(context.Context, *ClientMemberJoinRequest) (*ClientMemberJoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MemberJoin not implemented")
}
func (UnimplementedClientWriteRegistry2Server) MemberLeave(context.Context, *ClientMemberLeaveRequest) (*ClientMemberLeaveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MemberLeave not implemented")
}
func (UnimplementedClientWriteRegistry2Server) MemberHeartbeat(context.Context, *ClientMemberHeartbeatRequest) (*ClientMemberHeartbeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MemberHeartbeat not implemented")
}
func (UnimplementedClientWriteRegistry2Server) mustEmbedUnimplementedClientWriteRegistry2Server() {}

// UnsafeClientWriteRegistry2Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClientWriteRegistry2Server will
// result in compilation errors.
type UnsafeClientWriteRegistry2Server interface {
	mustEmbedUnimplementedClientWriteRegistry2Server()
}

func RegisterClientWriteRegistry2Server(s grpc.ServiceRegistrar, srv ClientWriteRegistry2Server) {
	s.RegisterService(&ClientWriteRegistry2_ServiceDesc, srv)
}

func _ClientWriteRegistry2_MemberJoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientMemberJoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientWriteRegistry2Server).MemberJoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.ClientWriteRegistry2/MemberJoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientWriteRegistry2Server).MemberJoin(ctx, req.(*ClientMemberJoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientWriteRegistry2_MemberLeave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientMemberLeaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientWriteRegistry2Server).MemberLeave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.ClientWriteRegistry2/MemberLeave",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientWriteRegistry2Server).MemberLeave(ctx, req.(*ClientMemberLeaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientWriteRegistry2_MemberHeartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientMemberHeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientWriteRegistry2Server).MemberHeartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.ClientWriteRegistry2/MemberHeartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientWriteRegistry2Server).MemberHeartbeat(ctx, req.(*ClientMemberHeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ClientWriteRegistry2_ServiceDesc is the grpc.ServiceDesc for ClientWriteRegistry2 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClientWriteRegistry2_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "registry.ClientWriteRegistry2",
	HandlerType: (*ClientWriteRegistry2Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MemberJoin",
			Handler:    _ClientWriteRegistry2_MemberJoin_Handler,
		},
		{
			MethodName: "MemberLeave",
			Handler:    _ClientWriteRegistry2_MemberLeave_Handler,
		},
		{
			MethodName: "MemberHeartbeat",
			Handler:    _ClientWriteRegistry2_MemberHeartbeat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "registry.proto",
}
