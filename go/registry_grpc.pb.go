// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RegistryClient is the client API for Registry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RegistryClient interface {
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (Registry_SubscribeClient, error)
	Register(ctx context.Context, opts ...grpc.CallOption) (Registry_RegisterClient, error)
}

type registryClient struct {
	cc grpc.ClientConnInterface
}

func NewRegistryClient(cc grpc.ClientConnInterface) RegistryClient {
	return &registryClient{cc}
}

func (c *registryClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (Registry_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &Registry_ServiceDesc.Streams[0], "/registry.Registry/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &registrySubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Registry_SubscribeClient interface {
	Recv() (*RemoteMemberUpdate, error)
	grpc.ClientStream
}

type registrySubscribeClient struct {
	grpc.ClientStream
}

func (x *registrySubscribeClient) Recv() (*RemoteMemberUpdate, error) {
	m := new(RemoteMemberUpdate)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *registryClient) Register(ctx context.Context, opts ...grpc.CallOption) (Registry_RegisterClient, error) {
	stream, err := c.cc.NewStream(ctx, &Registry_ServiceDesc.Streams[1], "/registry.Registry/Register", opts...)
	if err != nil {
		return nil, err
	}
	x := &registryRegisterClient{stream}
	return x, nil
}

type Registry_RegisterClient interface {
	Send(*ClientUpdate) error
	Recv() (*ClientAck, error)
	grpc.ClientStream
}

type registryRegisterClient struct {
	grpc.ClientStream
}

func (x *registryRegisterClient) Send(m *ClientUpdate) error {
	return x.ClientStream.SendMsg(m)
}

func (x *registryRegisterClient) Recv() (*ClientAck, error) {
	m := new(ClientAck)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RegistryServer is the server API for Registry service.
// All implementations must embed UnimplementedRegistryServer
// for forward compatibility
type RegistryServer interface {
	Subscribe(*SubscribeRequest, Registry_SubscribeServer) error
	Register(Registry_RegisterServer) error
	mustEmbedUnimplementedRegistryServer()
}

// UnimplementedRegistryServer must be embedded to have forward compatible implementations.
type UnimplementedRegistryServer struct {
}

func (UnimplementedRegistryServer) Subscribe(*SubscribeRequest, Registry_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedRegistryServer) Register(Registry_RegisterServer) error {
	return status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedRegistryServer) mustEmbedUnimplementedRegistryServer() {}

// UnsafeRegistryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RegistryServer will
// result in compilation errors.
type UnsafeRegistryServer interface {
	mustEmbedUnimplementedRegistryServer()
}

func RegisterRegistryServer(s grpc.ServiceRegistrar, srv RegistryServer) {
	s.RegisterService(&Registry_ServiceDesc, srv)
}

func _Registry_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RegistryServer).Subscribe(m, &registrySubscribeServer{stream})
}

type Registry_SubscribeServer interface {
	Send(*RemoteMemberUpdate) error
	grpc.ServerStream
}

type registrySubscribeServer struct {
	grpc.ServerStream
}

func (x *registrySubscribeServer) Send(m *RemoteMemberUpdate) error {
	return x.ServerStream.SendMsg(m)
}

func _Registry_Register_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RegistryServer).Register(&registryRegisterServer{stream})
}

type Registry_RegisterServer interface {
	Send(*ClientAck) error
	Recv() (*ClientUpdate, error)
	grpc.ServerStream
}

type registryRegisterServer struct {
	grpc.ServerStream
}

func (x *registryRegisterServer) Send(m *ClientAck) error {
	return x.ServerStream.SendMsg(m)
}

func (x *registryRegisterServer) Recv() (*ClientUpdate, error) {
	m := new(ClientUpdate)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Registry_ServiceDesc is the grpc.ServiceDesc for Registry service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Registry_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "registry.Registry",
	HandlerType: (*RegistryServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _Registry_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Register",
			Handler:       _Registry_Register_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "registry.proto",
}
