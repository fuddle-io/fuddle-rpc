// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RegistryV2Client is the client API for RegistryV2 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RegistryV2Client interface {
	// Register a member into the registry.
	RegisterMember(ctx context.Context, in *RegisterMemberRequest, opts ...grpc.CallOption) (*RegisterMemberResponse, error)
	// Unregister a member from the registry.
	UnregisterMember(ctx context.Context, in *UnregisterMemberRequest, opts ...grpc.CallOption) (*UnregisterMemberResponse, error)
	// Update a members metadata.
	UpdateMemberMetadata(ctx context.Context, in *UpdateMemberMetadataRequest, opts ...grpc.CallOption) (*UpdateMemberMetadataResponse, error)
	// Subscribe streams update to the set of members in the registry.
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (RegistryV2_SubscribeClient, error)
	// Heartbeat is sent by the clients so the server knows the client is still
	// alive.
	Heartbeat(ctx context.Context, in *HeartbeatRequestV2, opts ...grpc.CallOption) (*HeartbeatResponseV2, error)
	// Member returns the requested node from the registry.
	Member(ctx context.Context, in *MemberRequest, opts ...grpc.CallOption) (*MemberResponse, error)
	// Members returns the set of members in the registry.
	Members(ctx context.Context, in *MembersRequest, opts ...grpc.CallOption) (*MembersResponse, error)
}

type registryV2Client struct {
	cc grpc.ClientConnInterface
}

func NewRegistryV2Client(cc grpc.ClientConnInterface) RegistryV2Client {
	return &registryV2Client{cc}
}

func (c *registryV2Client) RegisterMember(ctx context.Context, in *RegisterMemberRequest, opts ...grpc.CallOption) (*RegisterMemberResponse, error) {
	out := new(RegisterMemberResponse)
	err := c.cc.Invoke(ctx, "/registryv2.RegistryV2/RegisterMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryV2Client) UnregisterMember(ctx context.Context, in *UnregisterMemberRequest, opts ...grpc.CallOption) (*UnregisterMemberResponse, error) {
	out := new(UnregisterMemberResponse)
	err := c.cc.Invoke(ctx, "/registryv2.RegistryV2/UnregisterMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryV2Client) UpdateMemberMetadata(ctx context.Context, in *UpdateMemberMetadataRequest, opts ...grpc.CallOption) (*UpdateMemberMetadataResponse, error) {
	out := new(UpdateMemberMetadataResponse)
	err := c.cc.Invoke(ctx, "/registryv2.RegistryV2/UpdateMemberMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryV2Client) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (RegistryV2_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &RegistryV2_ServiceDesc.Streams[0], "/registryv2.RegistryV2/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &registryV2SubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RegistryV2_SubscribeClient interface {
	Recv() (*MemberUpdate, error)
	grpc.ClientStream
}

type registryV2SubscribeClient struct {
	grpc.ClientStream
}

func (x *registryV2SubscribeClient) Recv() (*MemberUpdate, error) {
	m := new(MemberUpdate)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *registryV2Client) Heartbeat(ctx context.Context, in *HeartbeatRequestV2, opts ...grpc.CallOption) (*HeartbeatResponseV2, error) {
	out := new(HeartbeatResponseV2)
	err := c.cc.Invoke(ctx, "/registryv2.RegistryV2/Heartbeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryV2Client) Member(ctx context.Context, in *MemberRequest, opts ...grpc.CallOption) (*MemberResponse, error) {
	out := new(MemberResponse)
	err := c.cc.Invoke(ctx, "/registryv2.RegistryV2/Member", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryV2Client) Members(ctx context.Context, in *MembersRequest, opts ...grpc.CallOption) (*MembersResponse, error) {
	out := new(MembersResponse)
	err := c.cc.Invoke(ctx, "/registryv2.RegistryV2/Members", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegistryV2Server is the server API for RegistryV2 service.
// All implementations must embed UnimplementedRegistryV2Server
// for forward compatibility
type RegistryV2Server interface {
	// Register a member into the registry.
	RegisterMember(context.Context, *RegisterMemberRequest) (*RegisterMemberResponse, error)
	// Unregister a member from the registry.
	UnregisterMember(context.Context, *UnregisterMemberRequest) (*UnregisterMemberResponse, error)
	// Update a members metadata.
	UpdateMemberMetadata(context.Context, *UpdateMemberMetadataRequest) (*UpdateMemberMetadataResponse, error)
	// Subscribe streams update to the set of members in the registry.
	Subscribe(*SubscribeRequest, RegistryV2_SubscribeServer) error
	// Heartbeat is sent by the clients so the server knows the client is still
	// alive.
	Heartbeat(context.Context, *HeartbeatRequestV2) (*HeartbeatResponseV2, error)
	// Member returns the requested node from the registry.
	Member(context.Context, *MemberRequest) (*MemberResponse, error)
	// Members returns the set of members in the registry.
	Members(context.Context, *MembersRequest) (*MembersResponse, error)
	mustEmbedUnimplementedRegistryV2Server()
}

// UnimplementedRegistryV2Server must be embedded to have forward compatible implementations.
type UnimplementedRegistryV2Server struct {
}

func (UnimplementedRegistryV2Server) RegisterMember(context.Context, *RegisterMemberRequest) (*RegisterMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterMember not implemented")
}
func (UnimplementedRegistryV2Server) UnregisterMember(context.Context, *UnregisterMemberRequest) (*UnregisterMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnregisterMember not implemented")
}
func (UnimplementedRegistryV2Server) UpdateMemberMetadata(context.Context, *UpdateMemberMetadataRequest) (*UpdateMemberMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMemberMetadata not implemented")
}
func (UnimplementedRegistryV2Server) Subscribe(*SubscribeRequest, RegistryV2_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedRegistryV2Server) Heartbeat(context.Context, *HeartbeatRequestV2) (*HeartbeatResponseV2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}
func (UnimplementedRegistryV2Server) Member(context.Context, *MemberRequest) (*MemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Member not implemented")
}
func (UnimplementedRegistryV2Server) Members(context.Context, *MembersRequest) (*MembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Members not implemented")
}
func (UnimplementedRegistryV2Server) mustEmbedUnimplementedRegistryV2Server() {}

// UnsafeRegistryV2Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RegistryV2Server will
// result in compilation errors.
type UnsafeRegistryV2Server interface {
	mustEmbedUnimplementedRegistryV2Server()
}

func RegisterRegistryV2Server(s grpc.ServiceRegistrar, srv RegistryV2Server) {
	s.RegisterService(&RegistryV2_ServiceDesc, srv)
}

func _RegistryV2_RegisterMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryV2Server).RegisterMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registryv2.RegistryV2/RegisterMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryV2Server).RegisterMember(ctx, req.(*RegisterMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryV2_UnregisterMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnregisterMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryV2Server).UnregisterMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registryv2.RegistryV2/UnregisterMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryV2Server).UnregisterMember(ctx, req.(*UnregisterMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryV2_UpdateMemberMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMemberMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryV2Server).UpdateMemberMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registryv2.RegistryV2/UpdateMemberMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryV2Server).UpdateMemberMetadata(ctx, req.(*UpdateMemberMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryV2_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RegistryV2Server).Subscribe(m, &registryV2SubscribeServer{stream})
}

type RegistryV2_SubscribeServer interface {
	Send(*MemberUpdate) error
	grpc.ServerStream
}

type registryV2SubscribeServer struct {
	grpc.ServerStream
}

func (x *registryV2SubscribeServer) Send(m *MemberUpdate) error {
	return x.ServerStream.SendMsg(m)
}

func _RegistryV2_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatRequestV2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryV2Server).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registryv2.RegistryV2/Heartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryV2Server).Heartbeat(ctx, req.(*HeartbeatRequestV2))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryV2_Member_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryV2Server).Member(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registryv2.RegistryV2/Member",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryV2Server).Member(ctx, req.(*MemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryV2_Members_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryV2Server).Members(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registryv2.RegistryV2/Members",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryV2Server).Members(ctx, req.(*MembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RegistryV2_ServiceDesc is the grpc.ServiceDesc for RegistryV2 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RegistryV2_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "registryv2.RegistryV2",
	HandlerType: (*RegistryV2Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterMember",
			Handler:    _RegistryV2_RegisterMember_Handler,
		},
		{
			MethodName: "UnregisterMember",
			Handler:    _RegistryV2_UnregisterMember_Handler,
		},
		{
			MethodName: "UpdateMemberMetadata",
			Handler:    _RegistryV2_UpdateMemberMetadata_Handler,
		},
		{
			MethodName: "Heartbeat",
			Handler:    _RegistryV2_Heartbeat_Handler,
		},
		{
			MethodName: "Member",
			Handler:    _RegistryV2_Member_Handler,
		},
		{
			MethodName: "Members",
			Handler:    _RegistryV2_Members_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _RegistryV2_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "registryv2.proto",
}
