syntax = "proto3";

option go_package = "github.com/fuddle-io/fuddle-rpc;rpc";

package registry;

service Registry {
	// Register a member into the registry.
	rpc RegisterMember(RegisterMemberRequest) returns (RegisterMemberResponse) {}

	// Unregister a member from the registry.
	rpc UnregisterMember(UnregisterMemberRequest) returns (UnregisterMemberResponse) {}

	// Update a members metadata.
	rpc UpdateMemberMetadata(UpdateMemberMetadataRequest) returns (UpdateMemberMetadataResponse) {}

	// Subscribe streams update to the set of members in the registry.
	rpc Subscribe(SubscribeRequest) returns (stream MemberUpdate) {}

	// Heartbeat is sent by the clients so the server knows the client is still
	// alive.
	rpc Heartbeat(HeartbeatRequest) returns (HeartbeatResponse) {}

	// Member returns the requested node from the registry.
	rpc Member(MemberRequest) returns (MemberResponse) {}

	// Members returns the set of members in the registry.
	rpc Members(MembersRequest) returns (MembersResponse) {}
}

enum ErrorStatus {
	// Attempting to update a node that is not registered.
	NOT_REGISTERED = 0;

	// Attempting to register a node that is already in the registry.
	ALREADY_REGISTERED = 1;

	INVALID_MEMBER = 2;

	// Resuorce not found.
	NOT_FOUND = 3;

	// Unknown error.
	UNKNOWN = 4;
}

message Error {
	ErrorStatus status = 1;

	string description = 2;
}

enum MemberStatus {
	UP = 0;
	DOWN = 1;
}

message Member {
	// ID of the node.
	string id = 1;

	string client_id = 2;

	MemberStatus status = 3;

	uint64 version = 4;

	// Service is the type of service running on the node.
	string service = 5;

	// ity is the location of the node in the cluster.
	string locality = 6;

	// Created is the time the node was created in UNIX milliseconds.
	int64 created = 7;

	// Revision identifies the version of the service running on the node.
	string revision = 8;

	map<string, string> metadata = 9;
}

message RegisterMemberRequest {
	Member member = 1;
}

message RegisterMemberResponse {
	optional Error error = 1;
}

message UnregisterMemberRequest {
	string id = 1;
}

message UnregisterMemberResponse {
	optional Error error = 1;
}

message UpdateMemberMetadataRequest {
	string id = 1;

	map<string, string> metadata = 2;
}

message UpdateMemberMetadataResponse {
	optional Error error = 1;
}

message SubscribeRequest {
	map<string, uint64> versions = 1;
}

enum MemberUpdateType {
	REGISTER = 0;
	UNREGISTER = 1;
	STATE = 2;
}

message MemberUpdate {
	string id = 1;

	MemberUpdateType update_type = 2;

	Member member = 3;
}

message HeartbeatRequest {
	string client_id = 1;
}

message HeartbeatResponse {
}

message MembersRequest {
}

message MembersResponse {
	repeated Member members = 1;
	optional Error error = 2;
}

message MemberRequest {
	string id = 1;
}

message MemberResponse {
	Member member = 1;
	optional Error error = 2;
}
