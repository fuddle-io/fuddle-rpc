syntax = "proto3";

option go_package = "github.com/fuddle-io/fuddle-rpc;rpc";

package registry;

service Registry {
	// Read streams update to the registry on the target instance.
	rpc Read(SubscribeRequest) returns (stream RemoteMemberUpdate);

	// Write updates the registry on the target instance.
	rpc Write(stream ClientUpdate) returns (stream ClientAck);

	rpc Subscribe(SubscribeRequest) returns (stream RemoteMemberUpdate);
	rpc Register(stream ClientUpdate) returns (stream ClientAck);

	rpc Member(MemberRequest) returns (MemberResponse) {}
	rpc Members(MembersRequest) returns (MembersResponse) {}
}

enum MemberUpdateType {
	REGISTER = 0;
	UNREGISTER = 1;
}

message Version {
	string owner = 1;

	int64 timestamp = 2;

	uint64 counter = 3;
}

enum MemberStatus {
	UP = 0;
	DOWN = 1;
	LEFT = 2;
}

message Member {
	string id = 1;

	MemberStatus status = 2;

	// Service is the type of service running on the member.
	string service = 3;

	// Locality is the location of the node in the cluster.
	string locality = 4;

	// Created is the time the node was created in UNIX milliseconds.
	int64 created = 5;

	// Revision identifies the version of the service running on the node.
	string revision = 6;

	map<string, string> metadata = 7;
}

message LocalMemberUpdate {
	MemberUpdateType update_type = 1;

	Member member = 2;
}

message RemoteMemberUpdate {
	MemberUpdateType update_type = 1;

	Member member = 2;

	Version version = 3;
}

message SubscribeRequest {
	map<string, Version> known_members = 1;

	bool owner_only = 2;
}

enum ClientUpdateType {
	CLIENT_REGISTER = 0;
	CLIENT_UNREGISTER = 1;
	CLIENT_HEARTBEAT = 2;
}

message ClientUpdate {
	ClientUpdateType update_type = 1;

	Member member = 2;
}

message ClientAck {
}

message MemberRequest {
	string id = 1;
}

message MemberResponse {
	Member member = 1;
}

message MembersRequest {
}

message MembersResponse {
	repeated Member members = 1;
}
